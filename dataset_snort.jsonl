{"instruction": "Write a Snort rule to", "input": "detect ping floods using large ICMP packets.", "output": "alert icmp $EXTERNAL_NET any -> $HOME_NET any (msg:\"DOS ICMP Ping flood\"; itype:8; dsize:>1000; classtype:attempted-dos; sid:1001009; rev:1;)"}
{"instruction": "Create a rule to detect", "input": "brute-force login attempts over RDP.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 3389 (msg:\"RDP brute-force attempts\"; flow:to_server,established; detection_filter:track by_src, count 5, seconds 60; classtype:attempted-admin; sid:1001017; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SSH brute force attacks.", "output": "alert tcp any any -> any 22 (msg:\"SSH Brute Force Attempt\"; flow:to_server,established; content:\"SSH\"; detection_filter:track by_src, count 5, seconds 60; sid:1000001; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting FTP brute force attacks.", "output": "alert tcp any any -> any 21 (msg:\"FTP Brute Force Attempt\"; flow:to_server,established; content:\"530 Login\"; detection_filter:track by_src, count 5, seconds 60; sid:1000002; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Telnet brute force attacks.", "output": "alert tcp any any -> any 23 (msg:\"Telnet Brute Force Attempt\"; flow:to_server,established; detection_filter:track by_src, count 10, seconds 60; sid:1000003; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting RDP brute force attacks.", "output": "alert tcp any any -> any 3389 (msg:\"RDP Brute Force Attempt\"; flow:to_server,established; detection_filter:track by_src, count 5, seconds 60; sid:1000004; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SMTP brute force login attempts.", "output": "alert tcp any any -> any 25 (msg:\"SMTP Login Brute Force\"; flow:to_server,established; content:\"535 5.7.8 Authentication credentials invalid\"; detection_filter:track by_src, count 5, seconds 60; sid:1000005; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting POP3 brute force attacks.", "output": "alert tcp any any -> any 110 (msg:\"POP3 Login Brute Force\"; flow:to_server,established; content:\"-ERR\"; detection_filter:track by_src, count 5, seconds 60; sid:1000006; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting IMAP brute force login attempts.", "output": "alert tcp any any -> any 143 (msg:\"IMAP Login Brute Force\"; flow:to_server,established; content:\"NO LOGIN failed\"; detection_filter:track by_src, count 5, seconds 60; sid:1000007; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting HTTP Basic Auth brute force attacks.", "output": "alert tcp any any -> any 80 (msg:\"HTTP Basic Auth Brute Force\"; flow:to_server,established; content:\"401 Unauthorized\"; http_header; detection_filter:track by_src, count 5, seconds 60; sid:1000008; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SNMP brute force attempts.", "output": "alert udp any any -> any 161 (msg:\"SNMP Brute Force Attempt\"; flow:to_server; content:\"community\"; detection_filter:track by_src, count 5, seconds 60; sid:1000010; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting multiple SSH connection attempts.", "output": "alert tcp any any -> any 22 (msg:\"SSH Multiple Connection Attempts\"; flags:S; detection_filter:track by_src, count 10, seconds 60; sid:1000011; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting multiple FTP connection attempts.", "output": "alert tcp any any -> any 21 (msg:\"FTP Multiple Connection Attempts\"; flags:S; detection_filter:track by_src, count 10, seconds 60; sid:1000012; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting multiple Telnet connection attempts.", "output": "alert tcp any any -> any 23 (msg:\"Telnet Multiple Connection Attempts\"; flags:S; detection_filter:track by_src, count 10, seconds 60; sid:1000013; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting brute force login page accesses over HTTP.", "output": "alert tcp any any -> any 80 (msg:\"HTTP Login Page Access Brute Force\"; content:\"/login\"; http_uri; detection_filter:track by_src, count 10, seconds 60; sid:1000014; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting brute force attacks on HTTP Proxy servers.", "output": "alert tcp any any -> any 8080 (msg:\"HTTP Proxy Brute Force\"; content:\"407 Proxy Authentication Required\"; http_header; detection_filter:track by_src, count 5, seconds 60; sid:1000015; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting IMAPS login failures.", "output": "alert tcp any any -> any 993 (msg:\"IMAPS Login Failure\"; content:\"NO AUTHENTICATE failed\"; detection_filter:track by_src, count 5, seconds 60; sid:1000016; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting POP3S login failures.", "output": "alert tcp any any -> any 995 (msg:\"POP3S Login Failure\"; content:\"-ERR\"; detection_filter:track by_src, count 5, seconds 60; sid:1000017; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting MySQL brute force attempts.", "output": "alert tcp any any -> any 3306 (msg:\"MySQL Brute Force Attempt\"; content:\"Access denied for user\"; detection_filter:track by_src, count 5, seconds 60; sid:1000018; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting PostgreSQL brute force attempts.", "output": "alert tcp any any -> any 5432 (msg:\"PostgreSQL Brute Force Attempt\"; content:\"password authentication failed\"; detection_filter:track by_src, count 5, seconds 60; sid:1000019; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Oracle database brute force attempts.", "output": "alert tcp any any -> any 1521 (msg:\"Oracle Database Brute Force\"; content:\"ORA-01017\"; detection_filter:track by_src, count 5, seconds 60; sid:1000020; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting LDAP authentication failure brute force attacks.", "output": "alert tcp any any -> any 389 (msg:\"LDAP Authentication Failure Brute Force\"; content:\"Invalid Credentials\"; detection_filter:track by_src, count 5, seconds 60; sid:1000021; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting LDAPS authentication failure brute force attacks.", "output": "alert tcp any any -> any 636 (msg:\"LDAPS Authentication Failure Brute Force\"; content:\"Invalid Credentials\"; detection_filter:track by_src, count 5, seconds 60; sid:1000022; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting FTP user enumeration attempts.", "output": "alert tcp any any -> any 21 (msg:\"FTP User Enumeration Attempt\"; content:\"331 Password required\"; detection_filter:track by_src, count 10, seconds 60; sid:1000023; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting web login failures over HTTP.", "output": "alert tcp any any -> any 80 (msg:\"Web App Login Fail Brute Force\"; content:\"Invalid username or password\"; http_client_body; detection_filter:track by_src, count 5, seconds 60; sid:1000024; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting WordPress wp-login.php brute force attacks.", "output": "alert tcp any any -> any 80 (msg:\"WordPress wp-login.php Brute Force\"; content:\"/wp-login.php\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000025; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Drupal user login brute force attacks.", "output": "alert tcp any any -> any 80 (msg:\"Drupal login Brute Force\"; content:\"/user/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000026; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Joomla admin login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"Joomla admin login brute force\"; content:\"/administrator/index.php\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000027; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SSH authentication failure floods.", "output": "alert tcp any any -> any 22 (msg:\"SSH Authentication Failure Flood\"; content:\"Permission denied\"; detection_filter:track by_src, count 10, seconds 60; sid:1000028; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Magento admin login brute force.", "output": "alert tcp any any -> any 80 (msg:\"Magento Admin Login Brute Force\"; content:\"/admin\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000029; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Roundcube Webmail login brute force attacks.", "output": "alert tcp any any -> any 80 (msg:\"Roundcube Webmail Login Brute Force\"; content:\"_task=login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000030; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Odoo ERP login brute force attacks.", "output": "alert tcp any any -> any 80 (msg:\"Odoo ERP Login Brute Force\"; content:\"/web/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000031; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting phpMyAdmin login attempts.", "output": "alert tcp any any -> any 80 (msg:\"phpMyAdmin Login Attempt\"; content:\"/phpmyadmin/\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000032; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Zimbra Webmail login brute force.", "output": "alert tcp any any -> any 80 (msg:\"Zimbra Mail Login Attempt\"; content:\"/zimbra/\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000033; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting cPanel login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"CPanel Login Attempt\"; content:\"/cpanel\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000034; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Citrix Gateway login brute force.", "output": "alert tcp any any -> any 80 (msg:\"Citrix Gateway Login Attempt\"; content:\"/logon/LogonPoint/index.html\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000035; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting OpenVPN web admin login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"OpenVPN Web Admin Login Brute Force\"; content:\"/admin/\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000036; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Adminer DB management login brute force.", "output": "alert tcp any any -> any 80 (msg:\"Adminer DB Management Login\"; content:\"adminer.php\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000037; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Masscan SSH scan activity.", "output": "alert tcp any any -> any 22 (msg:\"Masscan SSH Scan Detection\"; flags:S; detection_filter:track by_src, count 100, seconds 60; sid:1000038; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting RDP login brute force attempts.", "output": "alert tcp any any -> any 3389 (msg:\"RDP Bruteforce Attempt\"; content:\"Cookie: mstshash=\"; detection_filter:track by_src, count 5, seconds 60; sid:1000039; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting multiple POST login failures over HTTP.", "output": "alert tcp any any -> any 80 (msg:\"Multiple POST Login Failures\"; content:\"POST \"; http_method; detection_filter:track by_src, count 10, seconds 60; sid:1000040; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting CMSMS admin login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"CMSMS Admin Login\"; content:\"/admin/login.php\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000041; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SilverStripe CMS login brute force attacks.", "output": "alert tcp any any -> any 80 (msg:\"SilverStripe CMS login attempt\"; content:\"/Security/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000042; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Elasticsearch admin UI login brute force.", "output": "alert tcp any any -> any 80 (msg:\"Elasticsearch Admin UI login brute force\"; content:\"/_plugin/head/\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000043; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting GitLab login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"GitLab login brute force\"; content:\"/users/sign_in\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000044; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Gitea login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"Gitea login brute force\"; content:\"/user/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000045; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nextcloud login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"Nextcloud login brute force\"; content:\"/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000046; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Seafile login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"Seafile login brute force\"; content:\"/accounts/login/\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000047; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Metabase login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"Metabase login brute force\"; content:\"/auth/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000048; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Rocket.Chat login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"Rocket.Chat login brute force\"; content:\"/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000049; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Mattermost login brute force attempts.", "output": "alert tcp any any -> any 80 (msg:\"Mattermost login brute force\"; content:\"/login\"; http_uri; detection_filter:track by_src, count 5, seconds 60; sid:1000050; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect SSH SYN flood DDoS attack.", "output": "alert tcp any any -> any 22 (msg:\"DDoS: SSH SYN Flood\"; flags:S; detection_filter:track by_dst, count 100, seconds 5; sid:3000001; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect HTTP SYN flood DDoS attack.", "output": "alert tcp any any -> any 80 (msg:\"DDoS: HTTP SYN Flood\"; flags:S; detection_filter:track by_dst, count 150, seconds 5; sid:3000002; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect HTTPS SYN flood DDoS attack.", "output": "alert tcp any any -> any 443 (msg:\"DDoS: HTTPS SYN Flood\"; flags:S; detection_filter:track by_dst, count 150, seconds 5; sid:3000003; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect MySQL SYN flood DDoS attack.", "output": "alert tcp any any -> any 3306 (msg:\"DDoS: MySQL SYN Flood\"; flags:S; detection_filter:track by_dst, count 120, seconds 5; sid:3000004; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect FTP SYN flood DDoS attack.", "output": "alert tcp any any -> any 21 (msg:\"DDoS: FTP SYN Flood\"; flags:S; detection_filter:track by_dst, count 100, seconds 5; sid:3000005; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect DNS UDP flood attack.", "output": "alert udp any any -> any 53 (msg:\"DDoS: DNS UDP Flood\"; detection_filter:track by_dst, count 200, seconds 5; sid:3000006; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect NTP UDP flood attack.", "output": "alert udp any any -> any 123 (msg:\"DDoS: NTP UDP Flood\"; detection_filter:track by_dst, count 200, seconds 5; sid:3000007; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect TFTP UDP flood attack.", "output": "alert udp any any -> any 69 (msg:\"DDoS: TFTP UDP Flood\"; detection_filter:track by_dst, count 100, seconds 5; sid:3000008; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect SNMP UDP flood attack.", "output": "alert udp any any -> any 161 (msg:\"DDoS: SNMP UDP Flood\"; detection_filter:track by_dst, count 100, seconds 5; sid:3000009; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect IKE UDP flood attack.", "output": "alert udp any any -> any 500 (msg:\"DDoS: IKE UDP Flood\"; detection_filter:track by_dst, count 100, seconds 5; sid:3000010; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect ICMP Echo Request (ping) flood.", "output": "alert icmp any any -> any any (msg:\"DDoS: ICMP Echo Request Flood\"; itype:8; detection_filter:track by_dst, count 300, seconds 10; sid:3000011; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect ICMP Destination Unreachable flood.", "output": "alert icmp any any -> any any (msg:\"DDoS: ICMP Unreachable Flood\"; itype:3; detection_filter:track by_dst, count 200, seconds 10; sid:3000012; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect ICMP Redirect flood.", "output": "alert icmp any any -> any any (msg:\"DDoS: ICMP Redirect Flood\"; itype:5; detection_filter:track by_dst, count 200, seconds 10; sid:3000013; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect ICMP Time Exceeded flood.", "output": "alert icmp any any -> any any (msg:\"DDoS: ICMP Time Exceeded Flood\"; itype:11; detection_filter:track by_dst, count 200, seconds 10; sid:3000014; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect HTTP GET flood attack.", "output": "alert tcp any any -> any 80 (msg:\"DDoS: HTTP GET Flood\"; flow:to_server,established; content:\"GET \"; http_method; detection_filter:track by_src, count 50, seconds 10; sid:3000015; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect HTTPS GET flood attack.", "output": "alert tcp any any -> any 443 (msg:\"DDoS: HTTPS GET Flood\"; flow:to_server,established; content:\"GET \"; http_method; detection_filter:track by_src, count 50, seconds 10; sid:3000016; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect DNS amplification attack.", "output": "alert udp any any -> any 53 (msg:\"DDoS: DNS Amplification Possible\"; content:\"|00 00 10 00|\"; offset:2; depth:4; detection_filter:track by_dst, count 100, seconds 5; sid:3000017; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect TCP RST flood attack.", "output": "alert tcp any any -> any any (msg:\"DDoS: TCP RST Flood Detected\"; flags:R; detection_filter:track by_dst, count 200, seconds 5; sid:3000018; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect TCP SYN-ACK flood attack.", "output": "alert tcp any any -> any any (msg:\"DDoS: TCP SYN-ACK Flood Detected\"; flags:SA; detection_filter:track by_dst, count 200, seconds 5; sid:3000019; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect IP fragment flood attack.", "output": "alert ip any any -> any any (msg:\"DDoS: IP Fragment Flood\"; fragbits:M; detection_filter:track by_dst, count 100, seconds 10; sid:3000020; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect UDP fragment flood attack.", "output": "alert udp any any -> any any (msg:\"DDoS: UDP Fragment Flood\"; fragbits:M; detection_filter:track by_dst, count 100, seconds 10; sid:3000021; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect TCP Xmas tree flood attack.", "output": "alert tcp any any -> any any (msg:\"DDoS: TCP Xmas Tree Flood\"; flags:FUAPRS; detection_filter:track by_dst, count 100, seconds 5; sid:3000022; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect TCP NULL packet flood attack.", "output": "alert tcp any any -> any any (msg:\"DDoS: TCP NULL Packet Flood\"; flags:0; detection_filter:track by_dst, count 100, seconds 5; sid:3000023; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect Land Attack (same src/dst IP).", "output": "alert tcp any any -> any any (msg:\"DDoS: Land Attack (same src/dst)\"; flow:stateless; detection_filter:track by_src, count 10, seconds 5; sid:3000024; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect TCP SYN-FIN flood attack.", "output": "alert tcp any any -> any any (msg:\"DDoS: TCP SYN-FIN Flood\"; flags:SF; detection_filter:track by_dst, count 100, seconds 5; sid:3000025; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect oversized ICMP packet flood.", "output": "alert icmp any any -> any any (msg:\"DDoS: Oversized ICMP Packet\"; dsize:>1000; detection_filter:track by_dst, count 50, seconds 10; sid:3000026; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect Teardrop attack (fragment overlap).", "output": "alert ip any any -> any any (msg:\"DDoS: Teardrop Attack Attempt\"; fragoffset:1; detection_filter:track by_dst, count 20, seconds 10; sid:3000027; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect IP Options flood attack.", "output": "alert ip any any -> any any (msg:\"DDoS: IP Options Flood Detected\"; ipopts:any; detection_filter:track by_dst, count 100, seconds 10; sid:3000028; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect UDP Port 0 flood attack.", "output": "alert udp any any -> any 0 (msg:\"DDoS: UDP Port 0 Flood Detected\"; detection_filter:track by_dst, count 100, seconds 5; sid:3000029; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect TCP ACK flood attack.", "output": "alert tcp any any -> any any (msg:\"DDoS: TCP ACK Flood\"; flags:A; detection_filter:track by_dst, count 200, seconds 5; sid:3000030; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect SNMP reflection DDoS attack.", "output": "alert udp any any -> any 161 (msg:\"DDoS: SNMP Reflection Attack\"; detection_filter:track by_dst, count 100, seconds 5; sid:3000031; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect NTP reflection DDoS attack.", "output": "alert udp any any -> any 123 (msg:\"DDoS: NTP Reflection Attack\"; content:\"|17 00 03 2a|\"; offset:0; depth:4; detection_filter:track by_dst, count 100, seconds 5; sid:3000032; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap TCP SYN scan.", "output": "alert tcp any any -> any any (msg:\"Nmap TCP SYN Scan Detected\"; flags:S; detection_filter:track by_src, count 20, seconds 10; sid:2000001; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap TCP NULL scan.", "output": "alert tcp any any -> any any (msg:\"Nmap TCP NULL Scan Detected\"; flags:0; detection_filter:track by_src, count 5, seconds 10; sid:2000002; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap TCP FIN scan.", "output": "alert tcp any any -> any any (msg:\"Nmap TCP FIN Scan Detected\"; flags:F; threshold:type threshold, track by_src, count 5, seconds 10; sid:2000003; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap TCP ACK scan.", "output": "alert tcp any any -> any any (msg:\"Nmap TCP ACK Scan Detected\"; flags:A; threshold:type threshold, track by_src, count 5, seconds 10; sid:2000005; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap TCP Window scan.", "output": "alert tcp any any -> any any (msg:\"Nmap TCP Window Scan Detected\"; flags:A; threshold:type threshold, track by_src, count 5, seconds 10; sid:2000006; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap TCP Maimon scan.", "output": "alert tcp any any -> any any (msg:\"Nmap TCP Maimon Scan Detected\"; flags:FA; threshold:type threshold, track by_src, count 5, seconds 10; sid:2000007; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap SSH version scan.", "output": "alert tcp any any -> any 22 (msg:\"Nmap SSH Version Scan Detected\"; content:\"SSH-\"; depth:4; threshold:type threshold, track by_src, count 5, seconds 10; sid:2000009; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap UDP scan.", "output": "alert udp any any -> any any (msg:\"Nmap UDP Scan Detected\"; threshold:type threshold, track by_src, count 10, seconds 10; sid:2000010; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SMB scanning attempts.", "output": "alert tcp any any -> any 445 (msg:\"SMB nmap scanning attempt\"; content:\"SMB\"; threshold:type threshold, track by_src, count 5, seconds 10; sid:2000011; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting FTP banner grabbing.", "output": "alert tcp any any -> any 21 (msg:\"FTP nmap banner grab detected\"; content:\"220 \"; depth:4; sid:2000012; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Telnet scanning attempts.", "output": "alert tcp any any -> any 23 (msg:\"Telnet nmap probe detected\"; threshold:type threshold, track by_src, count 5, seconds 10; sid:2000013; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting DNS zone transfer attempts.", "output": "alert tcp any any -> any 53 (msg:\"DNS Zone Transfer Request\"; content:\"AXFR\"; nocase; sid:2000014; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Masscan TCP SYN scan.", "output": "alert tcp any any -> any any (msg:\"Masscan TCP SYN Scan Detected\"; flags:S; threshold:type threshold, track by_src, count 100, seconds 10; sid:2000015; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting ICMP ping sweeps.", "output": "alert icmp any any -> any any (msg:\"Ping Sweep Detected\"; itype:8; threshold:type threshold, track by_src, count 10, seconds 5; sid:2000017; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting empty ICMP echo requests (possible scan).", "output": "alert icmp any any -> any any (msg:\"ICMP Echo Request (Scan)\"; itype:8; dsize:0; threshold:type threshold, track by_src, count 10, seconds 5; sid:2000018; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting TCP OS fingerprinting via TCP options.", "output": "alert tcp any any -> any any (msg:\"OS Fingerprinting Attempt (TCP Options)\"; flags:S; content:\"|02 04|\"; depth:4; sid:2000019; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting DCE/RPC version binds (possible scan).", "output": "alert tcp any any -> any 135 (msg:\"DCE/RPC Version Bind Probe\"; content:\"|05 00|\"; depth:2; sid:2000020; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting OpenVAS scanner activity.", "output": "alert tcp any any -> any any (msg:\"OpenVAS Scan Detected\"; content:\"OpenVAS\"; sid:2000021; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nessus scanner activity.", "output": "alert tcp any any -> any any (msg:\"Nessus Scanner Detected\"; content:\"nessus\"; nocase; sid:2000022; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nikto web scanner activity.", "output": "alert tcp any any -> any any (msg:\"Nikto Web Scanner Detected\"; content:\"Nikto\"; sid:2000023; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Skipfish web scanner.", "output": "alert tcp any any -> any any (msg:\"Skipfish Web Scanner Detected\"; content:\"Skipfish\"; sid:2000024; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting ZMap TCP SYN scan.", "output": "alert tcp any any -> any any (msg:\"ZMap TCP SYN Scan Detected\"; flags:S; threshold:type threshold, track by_src, count 500, seconds 10; sid:2000026; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting ZMap TCP ACK scan.", "output": "alert tcp any any -> any any (msg:\"ZMap TCP ACK Scan Detected\"; flags:A; threshold:type threshold, track by_src, count 500, seconds 10; sid:2000027; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SNMP scans on public community strings.", "output": "alert udp any any -> any 161 (msg:\"SNMP Public Community String Scan\"; content:\"public\"; threshold:type threshold, track by_src, count 5, seconds 60; sid:2000028; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting MSSQL version probing.", "output": "alert tcp any any -> any 1433 (msg:\"MSSQL Nmap Probe\"; content:\"|02 01 00|\"; depth:3; sid:2000029; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting MySQL banner grabbing.", "output": "alert tcp any any -> any 3306 (msg:\"MySQL Version Banner Grab\"; content:\"mysql_native_password\"; sid:2000030; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Nmap SNMP scans.", "output": "alert udp any any -> any 161 (msg:\"Nmap SNMP Scan\"; content:\"|30|\"; offset:0; depth:1; sid:2000031; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting VNC scanning via RFB protocol.", "output": "alert tcp any any -> any 5900 (msg:\"VNC Nmap Scan Detected\"; content:\"RFB\"; depth:3; sid:2000032; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Finger service enumeration.", "output": "alert tcp any any -> any 79 (msg:\"Finger Service Enumeration Attempt\"; sid:2000033; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting SMTP VRFY enumeration.", "output": "alert tcp any any -> any 25 (msg:\"SMTP VRFY Enumeration Attempt\"; content:\"VRFY\"; sid:2000034; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting HTTP OPTIONS method probes.", "output": "alert tcp any any -> any 80 (msg:\"HTTP Options Method Probe\"; content:\"OPTIONS / HTTP/1.1\"; http_method; sid:2000035; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting TFTP service enumeration attempts.", "output": "alert udp any any -> any 69 (msg:\"TFTP Enumeration Attempt\"; sid:2000036; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Rexec service enumeration.", "output": "alert tcp any any -> any 512 (msg:\"Rexec Service Enumeration Attempt\"; sid:2000037; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Rlogin service enumeration.", "output": "alert tcp any any -> any 513 (msg:\"Rlogin Service Enumeration Attempt\"; sid:2000038; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Rsh service enumeration.", "output": "alert tcp any any -> any 514 (msg:\"Rsh Service Enumeration Attempt\"; sid:2000039; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Web Proxy service scans on port 8080.", "output": "alert tcp any any -> any 8080 (msg:\"Web Proxy Service Scan\"; sid:2000040; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting NetBIOS name service scans.", "output": "alert udp any any -> any 137 (msg:\"NetBIOS Name Service Scan\"; sid:2000041; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting NetBIOS datagram service scans.", "output": "alert udp any any -> any 138 (msg:\"NetBIOS Datagram Service Scan\"; sid:2000042; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting NetBIOS session service scans.", "output": "alert udp any any -> any 139 (msg:\"NetBIOS Session Service Scan\"; sid:2000043; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting TFTP UDP scan activity.", "output": "alert udp any any -> any 69 (msg:\"TFTP UDP Scan Detected\"; sid:2000044; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting Rsh service scans.", "output": "alert tcp any any -> any 512 (msg:\"rsh Scan Detected\"; sid:2000045; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting DNS query floods.", "output": "alert udp any any -> any 53 (msg:\"DNS Query Flood Detected\"; threshold:type threshold, track by_src, count 100, seconds 10; sid:2000046; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting HTTP TRACE method probes.", "output": "alert tcp any any -> any 80 (msg:\"HTTP TRACE Method Probe\"; content:\"TRACE / HTTP/1.1\"; http_method; sid:2000048; rev:1;)"}
{"instruction": "Generate a Snort rule for", "input": "detecting high-rate TCP NULL scans.", "output": "alert tcp any any -> any any (msg:\"TCP NULL Scan High Rate\"; flags:0; threshold:type threshold, track by_src, count 100, seconds 5; sid:2000050; rev:1;)"}
{"instruction": "Write a snort rule to", "input": "alert Squid WCCP Message Overflow attacks.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 2048 (msg:\"DOS squid WCCP I_SEE_YOU message overflow attempt\"; content:\"|00 00 00 08|\"; depth:4; byte_test:4,>,32,16; reference:cve,CAN-2005-0095; reference:bugtraq,12275; classtype:attempted-user; sid:23089; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends WCCP messages with more data than the buffer can handle.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 2048 (msg:\"DOS squid WCCP I_SEE_YOU message overflow attempt\"; content:\"|00 00 00 08|\"; depth:4; byte_test:4,>,32,16; reference:cve,CAN-2005-0095; reference:bugtraq,12275; classtype:attempted-user; sid:33089; rev:1;)"}
{"instruction": "Write a snort rule to", "input": "alert Smurf Attacks.", "output": "alert icmp any any -> 255.255.255.255 any (msg:\"ICMP Packet to Broadcast Address\";sid:628832; rev:7;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of ICMP echo requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "output": "alert icmp any any -> 255.255.255.255 any (msg:\"ICMP Packet to Broadcast Address\";sid:674187; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts ICMP packets with a broadcast address as the destination address.", "output": "alert icmp any any -> 255.255.255.255 any (msg:\"ICMP Packet to Broadcast Address\";sid:611992; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert Fraggle Attacks.", "output": "alert udp any any -> 255.255.255.255 any (msg:\"Alert UDP Packet with Broadcast Destination Address\";sid:626907; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of UDP echo and chargen requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "output": "alert udp any any -> 255.255.255.255 any (msg:\"Alert UDP Packet with Broadcast Destination Address\";sid:637266; rev:7;)"}
{"instruction": "Write a snort rule that", "input": "alerts UDP packets with a broadcast address as the destination address.", "output": "alert udp any any -> 255.255.255.255 any (msg:\"Alert UDP Packet with Broadcast Destination Address\";sid:681030; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert Slowloris attacks.", "output": "alert tcp any any -> any any (flow:established, to_server; detection_filter: track by_src, count 50, seconds 10; msg:\"Possible Slowloris Attack\";sid:601365; rev:9;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of HTTP requests to open connections and keeps them open for as long as possible.", "output": "alert tcp any any -> any any (flow:established, to_server; detection_filter: track by_src, count 50, seconds 10; msg:\"Possible Slowloris Attack\";sid:684592; rev:5;)"}
{"instruction": "Write a snort rule that", "input": "alerts TCP packets with the flow established and to server, detection filter is track by_src, count 50 and seconds 10.", "output": "alert tcp any any -> any any (flow:established, to_server; detection_filter: track by_src, count 50, seconds 10; msg:\"Possible Slowloris Attack\";sid:667721; rev:8;)"}
{"instruction": "Write a snort rule to", "input": "alert DNS Amplification attacks.", "output": "alert udp any any -> any 53 (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible DNS Amplification Attack\";sid:623903; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of DNS requests to a DNS server with a spoofed source IP address of the victim.", "output": "alert udp any any -> any 53 (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible DNS Amplification Attack\";sid:609603; rev:2;)"}
{"instruction": "Write a snort rule that", "input": "alerts UDP packets to port 53 with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "output": "alert udp any any -> any 53 (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible DNS Amplification Attack\";sid:692231; rev:2;)"}
{"instruction": "Write a snort rule to", "input": "alert BlackNurse attacks.", "output": "alert icmp any any -> any any (itype: 3; msg:\"Possible BlackNurse Attack\";sid:694073; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends some ICMP Destination Unreachable packets to the victim.", "output": "alert icmp any any -> any any (itype: 3; msg:\"Possible BlackNurse Attack\";sid:655506; rev:8;)"}
{"instruction": "Write a snort rule that", "input": "alerts ICMP packets with a itype 3.", "output": "alert icmp any any -> any any (itype: 3; msg:\"Possible BlackNurse Attack\";sid:650572; rev:5;)"}
{"instruction": "Write a snort rule to", "input": "alert Low Orbit Ion Cannon (LOIC) attacks on tcp.", "output": "alert tcp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:86524; rev:7;)"}
{"instruction": "Write a snort rule to", "input": "alert Low Orbit Ion Cannon (LOIC) attacks on udp.", "output": "alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:679372; rev:3;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker uses a LOIC tool to send a large number of TCP requests to the victim.", "output": "alert tcp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:613424; rev:6;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker uses a LOIC tool to send a large number of UDP requests to the victim.", "output": "alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:615444; rev:6;)"}
{"instruction": "Write a snort rule that", "input": "alerts TCP packets with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "output": "alert tcp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:635222; rev:7;)"}
{"instruction": "Write a snort rule that", "input": "alerts UDP packets with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "output": "alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:633252; rev:7;)"}
{"instruction": "Write a snort rule to", "input": "alert High Orbit Ion Cannon (HOIC) attacks.", "output": "alert tcp any any -> any any (msg:\"Possible HOIC Attack Detected\"; flow:stateless; detection_filter:track by_dst, count 50, seconds 10; content:\"POST\"; http_method; content:\"GET\"; http_method;sid:608748; rev:9;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker floods the victim with a large number of HTTP POST and GET requests.", "output": "alert tcp any any -> any any (msg:\"Possible HOIC Attack Detected\"; flow:stateless; detection_filter:track by_dst, count 50, seconds 10; content:\"POST\"; http_method; content:\"GET\"; http_method;sid:634685; rev:6;)"}
{"instruction": "Write a snort rule that", "input": "alerts HTTP POST and GET requests with the flow stateless, detection filter is track by_dst, count 50 and seconds 10.", "output": "alert tcp any any -> any any (msg:\"Possible HOIC Attack Detected\"; flow:stateless; detection_filter:track by_dst, count 50, seconds 10; content:\"POST\"; http_method; content:\"GET\"; http_method;sid:630908; rev:5;)"}
{"instruction": "Write a snort rule to", "input": "alert SubSeven attacks.", "output": "alert tcp $EXTERNAL_NET 27374 -> $HOME_NET any (msg:\"BACKDOOR subseven 22\"; flow:to_server,established; content:\"|0D 0A|[RPL]002|0D 0A|\";sid:668856; rev:4;)"}
{"instruction": "Write a snort rule to", "input": "alert Teardrop attacks.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET any (msg:\"DOS Teardrop attack\"; fragbits:M; id:242;sid:681122; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a series of fragmented packets.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET any (msg:\"DOS Teardrop attack\"; fragbits:M; id:242;sid:632465; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts incoming udp packets with the fragbits value set to more fragments.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET any (msg:\"DOS Teardrop attack\"; fragbits:M; id:242;sid:666999; rev:2;)"}
{"instruction": "Write a snort rule to", "input": "alert WinNuke attacks.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 135:139 (msg:\"DOS Winnuke attack\"; flow:stateless; flags:U+;sid:670460; rev:6;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a string of out-of-band data to the victim.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 135:139 (msg:\"DOS Winnuke attack\"; flow:stateless; flags:U+;sid:681816; rev:5;)"}
{"instruction": "Write a snort rule that", "input": "alerts incoming packets to port 135 through 139 that have a stateless flow and a flag of U+ set.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 135:139 (msg:\"DOS Winnuke attack\"; flow:stateless; flags:U+;sid:653919; rev:4;)"}
{"instruction": "Write a snort rule to", "input": "alert SSH CRC32 Overflow /bin/sh exploits.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 22 (msg:\"EXPLOIT ssh CRC32 overflow /bin/sh\"; flow:to_server,established; content:\"/bin/sh\";sid:643515; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker executes arbitrary commands on an SSH server via an integer overflow.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 22 (msg:\"EXPLOIT ssh CRC32 overflow /bin/sh\"; flow:to_server,established; content:\"/bin/sh\";sid:656117; rev:2;)"}
{"instruction": "Write a snort rule to", "input": "alert x86 Linux Samba Overflow exploits.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:\"EXPLOIT x86 Linux samba overflow\"; flow:to_server,established; content:\"|EB|/_|EB|J^|89 FB 89|>|89 F2|\";sid:628023; rev:1;)"}
{"instruction": "Write a snort rule to", "input": "alert ISAKMP First Payload Certificate Request Length Overflow exploits.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 500 (msg:\"EXPLOIT ISAKMP first payload certificate request length overflow attempt\"; byte_test:4,>,2043,24; content:\"|07|\"; depth:1; offset:16; byte_test:2,>,2043,30;sid:645256; rev:7;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker executes arbitrary code via an ISAKMP packet with a large Certificate Request packet.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 500 (msg:\"EXPLOIT ISAKMP first payload certificate request length overflow attempt\"; byte_test:4,>,2043,24; content:\"|07|\"; depth:1; offset:16; byte_test:2,>,2043,30;sid:650864; rev:1;)"}
{"instruction": "Write a snort rule to", "input": "alert MYSQL Root Login attempts.", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:\"MYSQL root login attempt\"; flow:to_server,established; content:\"|0A 00 00 01 85 04 00 00 80|root|00|\";sid:694690; rev:5;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to log in as root on a MYSQL server.", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:\"MYSQL root login attempt\"; flow:to_server,established; content:\"|0A 00 00 01 85 04 00 00 80|root|00|\";sid:676793; rev:8;)"}
{"instruction": "Write a snort rule to", "input": "alert MYSQL Show Databases attempts.", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:\"MYSQL show databases attempt\"; flow:to_server,established; content:\"|0F 00 00 00 03|show databases\";sid:611911; rev:2;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to show the databases on a MYSQL server.", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:\"MYSQL show databases attempt\"; flow:to_server,established; content:\"|0F 00 00 00 03|show databases\";sid:661038; rev:6;)"}
{"instruction": "Write a snort rule to", "input": "alert NETBIOS NT NULL Session Request attempts.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:\"NETBIOS NT NULL session\"; flow:to_server,established; content:\"|00 00 00 00|W|00|i|00|n|00|d|00|o|00|w|00|s|00| |00|N|00|T|00| |00|1|00|3|00|8|00|1\";sid:615775; rev:8;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to cause a denial of service via a NetBIOS session request packet with a NULL source name.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:\"NETBIOS NT NULL session\"; flow:to_server,established; content:\"|00 00 00 00|W|00|i|00|n|00|d|00|o|00|w|00|s|00| |00|N|00|T|00| |00|1|00|3|00|8|00|1\";sid:622035; rev:2;)"}
{"instruction": "Write a snort rule to", "input": "alert SHELLCODE sparc setuid 0 attempts.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE sparc setuid 0\"; content:\"|82 10| |17 91 D0| |08|\";sid:651383; rev:9;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to exploit the setuid() function on a SPARC architecture.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE sparc setuid 0\"; content:\"|82 10| |17 91 D0| |08|\";sid:650526; rev:1;)"}
{"instruction": "Write a snort rule to", "input": "alert SHELLCODE x86 setgid 0 attempts.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE x86 setgid 0\"; content:\"|B0 B5 CD 80|\";sid:668220; rev:5;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to exploit the setgid() function on a x86 architecture.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE x86 setgid 0\"; content:\"|B0 B5 CD 80|\";sid:645148; rev:9;)"}
{"instruction": "Write a snort rule to", "input": "alert SHELLCODE x86 setuid 0 attempts.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE x86 setuid 0\"; content:\"|B0 17 CD 80|\";sid:690419; rev:2;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to exploit the setuid() function on a x86 architecture.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE x86 setuid 0\"; content:\"|B0 17 CD 80|\";sid:683739; rev:5;)"}
{"instruction": "Write a snort rule to", "input": "alert SQL Worm Propagation attempts.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 1434 (msg:\"SQL Worm propagation attempt\"; content:\"|04|\"; depth:1; content:\"|81 F1 03 01 04 9B 81 F1 01|\"; content:\"sock\"; content:\"send\";sid:625191; rev:9;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to propagate a SQL worm.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 1434 (msg:\"SQL Worm propagation attempt\"; content:\"|04|\"; depth:1; content:\"|81 F1 03 01 04 9B 81 F1 01|\"; content:\"sock\"; content:\"send\";sid:664014; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert Cross Site Scripting (XSS) attempts.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"Cross site scripting attempt\"; flow:to_server,established; content:\"<SCRIPT>\"; nocase;sid:664942; rev:9;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to inject malicious scripts into a website.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"Cross site scripting attempt\"; flow:to_server,established; content:\"<SCRIPT>\"; nocase;sid:644973; rev:2;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sets the source and destination information of a TCP segment to be the same.", "output": "alert tcp any any -> any any (msg:\"LAND Attack Detected - Src IP and Dst IP are equal\"; flow:stateless; detection_filter:track by_src, count 1, seconds 10; sid:1005001; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of ICMP echo requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "output": "alert icmp any any -> 255.255.255.255 any (msg:\"ICMP Packet to Broadcast Address\";sid:664094; rev:7;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of UDP echo and chargen requests to an IP broadcast address, all of which have a spoofed source IP address of the intended victim.", "output": "alert udp any any -> 255.255.255.255 any (msg:\"Alert UDP Packet with Broadcast Destination Address\";sid:678933; rev:9;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of HTTP requests to open connections and keeps them open for as long as possible.", "output": "alert tcp any any -> any any (flow:established, to_server; detection_filter: track by_src, count 50, seconds 10; msg:\"Possible Slowloris Attack\";sid:656283; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a large number of DNS requests to a DNS server with a spoofed source IP address of the victim.", "output": "alert udp any any -> any 53 (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible DNS Amplification Attack\";sid:622938; rev:3;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends some ICMP Destination Unreachable packets to the victim.", "output": "alert icmp any any -> any any (itype: 3; msg:\"Possible BlackNurse Attack\";sid:665145; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker uses a LOIC tool to send a large number of TCP requests to the victim.", "output": "alert tcp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:691572; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker uses a LOIC tool to send a large number of UDP requests to the victim.", "output": "alert udp any any -> any any (flow:stateless; detection_filter:track by_dst, count 50, seconds 10; msg:\"Possible LOIC Attack Detected\";sid:691871; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker floods the victim with a large number of HTTP POST and GET requests.", "output": "alert tcp any any -> any any (msg:\"Possible HOIC Attack Detected\"; flow:stateless; detection_filter:track by_dst, count 50, seconds 10; content:\"POST\"; http_method; content:\"GET\"; http_method;sid:604390; rev:8;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a series of fragmented packets.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET any (msg:\"DOS Teardrop attack\"; fragbits:M; id:242;sid:626857; rev:6;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends a string of out-of-band data to the victim.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 135:139 (msg:\"DOS Winnuke attack\"; flow:stateless; flags:U+;sid:617983; rev:2;)"}
{"instruction": "Write a snort rule that", "input": "alerts an attack in which the attacker sends WCCP messages with more data than the buffer can handle.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 2048 (msg:\"DOS squid WCCP I_SEE_YOU message overflow attempt\"; content:\"|00 00 00 08|\"; depth:4; byte_test:4,>,32,16; reference:cve,CAN-2005-0095; reference:bugtraq,12275; classtype:attempted-user; sid:53089; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker executes arbitrary commands on an SSH server via an integer overflow.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 22 (msg:\"EXPLOIT ssh CRC32 overflow /bin/sh\"; flow:to_server,established; content:\"/bin/sh\";sid:673847; rev:7;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker executes arbitrary code via an ISAKMP packet with a large Certificate Request packet.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 500 (msg:\"EXPLOIT ISAKMP first payload certificate request length overflow attempt\"; byte_test:4,>,2043,24; content:\"|07|\"; depth:1; offset:16; byte_test:2,>,2043,30;sid:603233; rev:8;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to log in as root on a MYSQL server.", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:\"MYSQL root login attempt\"; flow:to_server,established; content:\"|0A 00 00 01 85 04 00 00 80|root|00|\";sid:682643; rev:2;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to show the databases on a MYSQL server.", "output": "alert tcp $EXTERNAL_NET any -> $SQL_SERVERS 3306 (msg:\"MYSQL show databases attempt\"; flow:to_server,established; content:\"|0F 00 00 00 03|show databases\";sid:618591; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to cause a denial of service via a NetBIOS session request packet with a NULL source name.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET 139 (msg:\"NETBIOS NT NULL session\"; flow:to_server,established; content:\"|00 00 00 00|W|00|i|00|n|00|d|00|o|00|w|00|s|00| |00|N|00|T|00| |00|1|00|3|00|8|00|1\";sid:617248; rev:1;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to exploit the setuid() function on a SPARC architecture.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE sparc setuid 0\"; content:\"|82 10| |17 91 D0| |08|\";sid:637818; rev:3;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to exploit the setgid() function on a x86 architecture.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE x86 setgid 0\"; content:\"|B0 B5 CD 80|\";sid:655821; rev:6;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to exploit the setuid() function on a x86 architecture.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE x86 setuid 0\"; content:\"|B0 17 CD 80|\";sid:640159; rev:2;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to propagate a SQL worm.", "output": "alert udp $EXTERNAL_NET any -> $HOME_NET 1434 (msg:\"SQL Worm propagation attempt\"; content:\"|04|\"; depth:1; content:\"|81 F1 03 01 04 9B 81 F1 01|\"; content:\"sock\"; content:\"send\";sid:627431; rev:4;)"}
{"instruction": "Write a snort rule that", "input": "alerts when the attacker attempts to inject malicious scripts into a website.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"Cross site scripting attempt\"; flow:to_server,established; content:\"<SCRIPT>\"; nocase;sid:607736; rev:8;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets from the ip address 154.164.48.20", "output": "alert tcp 154.164.48.20 any -> any any (msg:\"packet from source ip 154.164.48.20\";sid:658985; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets to the ip address 24.160.43.241", "output": "alert icmp any any -> 24.160.43.241 any (msg:\"packet to destination ip 24.160.43.241\";sid:605981; rev:8;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets from the port 43267", "output": "alert tcp any 43267 -> any any (msg:\"packet from port 43267\";sid:663151; rev:9;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets to the port 12345", "output": "alert icmp any any -> any 12345 (msg:\"packet to port 12345\";sid:665376; rev:8;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to the echo service port", "output": "alert tcp any any -> any 7 (msg:\"packet to echo service port\";sid:614819; rev:4;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to the dns port", "output": "alert tcp any any -> any 53 (msg:\"packet to dns port\";sid:693622; rev:5;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to the http port", "output": "alert tcp any any -> any 80 (msg:\"packet to http port\";sid:669636; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to the NetBIOS ports", "output": "alert tcp any any -> any 137:139 (msg:\"packets to NetBIOS ports\";sid:662802; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to the https port", "output": "alert tcp any any -> any 443 (msg:\"packets to https port\";sid:651555; rev:5;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to the mysql port", "output": "alert tcp any any -> any 3306 (msg:\"packets to mysql port\";sid:666223; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to the subseven port", "output": "alert tcp any any -> any 27374 (msg:\"packets to subseven port\";sid:677903; rev:4;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets with the icmp packet type 3", "output": "alert icmp any any -> any any (itype: 3; msg:\"packets with icmp type 3\";sid:609078; rev:7;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets with specific icmp packet type 8", "output": "alert icmp any any -> any any (itype: 8; msg:\"ICMP Echo Request Detected\"; sid:630503; rev:8;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets with the icmp packet type echo reply", "output": "alert icmp any any -> any any (itype: 0; msg:\"packets with icmp type echo reply\";sid:613399; rev:7;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets with the icmp packet type destination unreachable", "output": "alert icmp any any -> any any (itype: 3; msg:\"packets with icmp type destination unreachable\";sid:606715; rev:7;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets with the icmp packet type redirect", "output": "alert icmp any any -> any any (itype: 5; msg:\"packets with icmp type redirect\";sid:612375; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets with the icmp packet type echo", "output": "alert icmp any any -> any any (itype: 8; msg:\"packets with icmp type echo\";sid:663229; rev:6;)"}
{"instruction": "Write a snort rule to", "input": "alert icmp packets with the size bigger than 50432", "output": "alert icmp any any -> any any (dsize:50433<>65535; msg:\"packets with size bigger than 50432\"; sid:672861; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets to a broadcast address", "output": "alert tcp any any -> 255.255.255.255 any (msg:\"packets to a broadcast address\";sid:609255; rev:2;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a syn flag", "output": "alert tcp any any -> any any (flags: S; msg:\"packets with syn flag\";sid:668911; rev:7;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with an ack and rst flag", "output": "alert tcp any any -> any any (flags: AR; msg:\"packets with ack and rst flag\";sid:684195; rev:4;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a fin flag", "output": "alert tcp any any -> any any (flags: F; msg:\"packets with fin flag\";sid:603591; rev:9;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a flow to client", "output": "alert tcp any any -> any any (flow: to_client; msg:\"packets with flow to client\";sid:699387; rev:4;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a flow established to server", "output": "alert tcp any any -> any any (flow: established,to_server; msg:\"packets with established connection and flow to server\";sid:671117; rev:2;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a flow not established from client with no stream", "output": "alert tcp any any -> any any (flow: not_established,from_client,no_stream; msg:\"packets with connection not established, flow from client and no stream\";sid:649261; rev:8;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a flow from server with only stream", "output": "alert tcp any any -> any any (flow: from_server,only_stream; msg:\"packets with flow from server and only stream\";sid:661955; rev:4;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a stateless flow", "output": "alert tcp any any -> any any (flow: stateless; msg:\"packets with stateless flow\";sid:697655; rev:9;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with no fragmented packets", "output": "alert tcp any any -> any any (flow: no_frag; msg:\"no fragmented packets\";sid:667251; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with only fragmented packets", "output": "alert tcp any any -> any any (flow: only_frag; msg:\"fragmented packets\";sid:624392; rev:5;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a detection filter that tracks by source, with a count of 30 and 60 seconds", "output": "alert tcp any any -> any any (detection_filter: track by_src, count 30, seconds 60; msg:\"single source made 30 attempts to connect in 60 seconds\";sid:670805; rev:3;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with a detection filter that tracks by destination,with a count of 30 and 60 seconds", "output": "alert tcp any any -> any any (detection_filter: track by_dst, count 20, seconds 60; msg:\"single source made 20 attempts to connect in 60 seconds\";sid:603040; rev:5;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with fragmentation", "output": "alert tcp any any -> any any (fragbits: M; msg:\"fragmented packet\";sid:693037; rev:7;)"}
{"instruction": "Write a snort rule to", "input": "alert tcp packets with no fragmentation", "output": "alert tcp any any -> any any (fragbits: D; msg:\"packet not fragmented\";sid:660130; rev:9;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 250", "output": "alert tcp any any -> any 250 (msg:\"Packet to destination port 250\"; sid:600001; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.193", "output": "alert tcp 154.164.48.193 any -> any any (msg:\"Packet from source IP 154.164.48.193\"; sid:600002; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.176", "output": "alert tcp 154.164.48.176 any -> any any (msg:\"Packet from source IP 154.164.48.176\"; sid:600003; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 726", "output": "alert tcp any any -> any 726 (msg:\"Packet to destination port 726\"; sid:600004; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 1005", "output": "alert tcp any any -> any 1005 (msg:\"Packet to destination port 1005\"; sid:600005; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 299", "output": "alert tcp any any -> any 299 (msg:\"Packet to destination port 299\"; sid:600006; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 879", "output": "alert tcp any any -> any 879 (msg:\"Packet to destination port 879\"; sid:600007; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 2862", "output": "alert tcp any 2862 -> any any (msg:\"Packet from source port 2862\"; sid:600008; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 50012", "output": "alert tcp any 50012 -> any any (msg:\"Packet from source port 50012\"; sid:600009; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 913", "output": "alert tcp any any -> any 913 (msg:\"Packet to destination port 913\"; sid:600010; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 50591", "output": "alert tcp any 50591 -> any any (msg:\"Packet from source port 50591\"; sid:600011; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 1020", "output": "alert tcp any any -> any 1020 (msg:\"Packet to destination port 1020\"; sid:600012; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.53", "output": "alert tcp 154.164.48.53 any -> any any (msg:\"Packet from source IP 154.164.48.53\"; sid:600013; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 60080", "output": "alert tcp any 60080 -> any any (msg:\"Packet from source port 60080\"; sid:600014; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.7", "output": "alert tcp 154.164.48.7 any -> any any (msg:\"Packet from source IP 154.164.48.7\"; sid:600015; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.15", "output": "alert tcp 154.164.48.15 any -> any any (msg:\"Packet from source IP 154.164.48.15\"; sid:600016; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 538", "output": "alert tcp any any -> any 538 (msg:\"Packet to destination port 538\"; sid:600017; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 274", "output": "alert tcp any any -> any 274 (msg:\"Packet to destination port 274\"; sid:600018; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.50", "output": "alert tcp 154.164.48.50 any -> any any (msg:\"Packet from source IP 154.164.48.50\"; sid:600019; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 39212", "output": "alert tcp any 39212 -> any any (msg:\"Packet from source port 39212\"; sid:600020; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 17959", "output": "alert tcp any 17959 -> any any (msg:\"Packet from source port 17959\"; sid:600021; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to the IP address 154.164.48.247", "output": "alert tcp any any -> 154.164.48.247 any (msg:\"Packet to destination IP 154.164.48.247\"; sid:600022; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 10280", "output": "alert tcp any 10280 -> any any (msg:\"Packet from source port 10280\"; sid:600023; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.167", "output": "alert tcp 154.164.48.167 any -> any any (msg:\"Packet from source IP 154.164.48.167\"; sid:600024; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to the IP address 154.164.48.50", "output": "alert tcp any any -> 154.164.48.50 any (msg:\"Packet to destination IP 154.164.48.50\"; sid:600025; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 41489", "output": "alert tcp any 41489 -> any any (msg:\"Packet from source port 41489\"; sid:600026; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to the IP address 154.164.48.160", "output": "alert tcp any any -> 154.164.48.160 any (msg:\"Packet to destination IP 154.164.48.160\"; sid:600027; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.175", "output": "alert tcp 154.164.48.175 any -> any any (msg:\"Packet from source IP 154.164.48.175\"; sid:600028; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.59", "output": "alert tcp 154.164.48.59 any -> any any (msg:\"Packet from source IP 154.164.48.59\"; sid:600029; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 664", "output": "alert tcp any any -> any 664 (msg:\"Packet to destination port 664\"; sid:600030; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.151", "output": "alert tcp 154.164.48.151 any -> any any (msg:\"Packet from source IP 154.164.48.151\"; sid:600031; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.136", "output": "alert tcp 154.164.48.136 any -> any any (msg:\"Packet from source IP 154.164.48.136\"; sid:600032; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to the IP address 154.164.48.195", "output": "alert tcp any any -> 154.164.48.195 any (msg:\"Packet to destination IP 154.164.48.195\"; sid:600033; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to the IP address 154.164.48.64", "output": "alert tcp any any -> 154.164.48.64 any (msg:\"Packet to destination IP 154.164.48.64\"; sid:600034; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 857", "output": "alert tcp any any -> any 857 (msg:\"Packet to destination port 857\"; sid:600035; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.131", "output": "alert tcp 154.164.48.131 any -> any any (msg:\"Packet from source IP 154.164.48.131\"; sid:600036; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 57923", "output": "alert tcp any 57923 -> any any (msg:\"Packet from source port 57923\"; sid:600037; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to the IP address 154.164.48.247", "output": "alert tcp any any -> 154.164.48.247 any (msg:\"Packet to destination IP 154.164.48.247\"; sid:600038; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 12856", "output": "alert tcp any 12856 -> any any (msg:\"Packet from source port 12856\"; sid:600039; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.239", "output": "alert tcp 154.164.48.239 any -> any any (msg:\"Packet from source IP 154.164.48.239\"; sid:600040; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 42522", "output": "alert tcp any 42522 -> any any (msg:\"Packet from source port 42522\"; sid:600041; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.228", "output": "alert tcp 154.164.48.228 any -> any any (msg:\"Packet from source IP 154.164.48.228\"; sid:600042; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to the IP address 154.164.48.95", "output": "alert tcp any any -> 154.164.48.95 any (msg:\"Packet to destination IP 154.164.48.95\"; sid:600043; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.144", "output": "alert tcp 154.164.48.144 any -> any any (msg:\"Packet from source IP 154.164.48.144\"; sid:600044; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 39005", "output": "alert tcp any 39005 -> any any (msg:\"Packet from source port 39005\"; sid:600045; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 9614", "output": "alert tcp any 9614 -> any any (msg:\"Packet from source port 9614\"; sid:600046; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from source port 56265", "output": "alert tcp any 56265 -> any any (msg:\"Packet from source port 56265\"; sid:600047; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.90", "output": "alert tcp 154.164.48.90 any -> any any (msg:\"Packet from source IP 154.164.48.90\"; sid:600048; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets from the IP address 154.164.48.48", "output": "alert tcp 154.164.48.48 any -> any any (msg:\"Packet from source IP 154.164.48.48\"; sid:600049; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert TCP packets to destination port 798", "output": "alert tcp any any -> any 798 (msg:\"Packet to destination port 798\"; sid:600050; rev:1;)"}
{"instruction": "Write a Snort rule that", "input": "detects SSH brute-force attacks by monitoring multiple login attempts to port 22.", "output": "alert tcp any any -> any 22 (msg:\"SSH Brute Force Detected\"; flow:to_server,established; content:\"SSH\"; detection_filter:track by_src, count 5, seconds 60; sid:1001001; rev:1;)"}
{"instruction": "Create a Snort rule to", "input": "detect HTTP GET floods as part of DDoS attacks.", "output": "alert tcp any any -> any 80 (msg:\"HTTP GET Flood\"; flow:to_server,established; content:\"GET \"; http_method; detection_filter:track by_src, count 50, seconds 10; sid:1001002; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "alert on SQL injection attempts using 'UNION SELECT' in HTTP URIs.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"SQL Injection Attempt - UNION SELECT\"; flow:to_server,established; content:\"UNION SELECT\"; http_uri; nocase; sid:1001003; rev:1;)"}
{"instruction": "Write a rule to detect", "input": "cross-site scripting (XSS) attempts using <script> tags.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"XSS Attempt Detected\"; flow:to_server,established; content:\"<script\"; nocase; sid:1001004; rev:1;)"}
{"instruction": "Write a rule to detect", "input": "FTP login failures that could indicate brute-force attempts.", "output": "alert tcp any any -> any 21 (msg:\"FTP Login Failure Brute Force\"; flow:to_server,established; content:\"530 Login incorrect\"; detection_filter:track by_src, count 5, seconds 60; sid:1001005; rev:1;)"}
{"instruction": "Create a rule to detect", "input": "large ICMP echo packets that may indicate a ping of death attack.", "output": "alert icmp any any -> any any (itype:8; dsize:>1000; msg:\"ICMP Ping of Death Attempt\"; sid:1001006; rev:1;)"}
{"instruction": "Write a rule to detect", "input": "Nmap NULL scans.", "output": "alert tcp any any -> any any (msg:\"Nmap NULL Scan Detected\"; flags:0; detection_filter:track by_src, count 5, seconds 10; sid:1001007; rev:1;)"}
{"instruction": "Write a rule to detect", "input": "directory traversal attacks in HTTP URIs.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"Directory Traversal Attempt\"; flow:to_server,established; content:\"../\"; http_uri; sid:1001008; rev:1;)"}
{"instruction": "Create a rule to detect", "input": "possible command injection using 'wget' in HTTP bodies.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"Command Injection - wget Detected\"; flow:to_server,established; content:\"wget \"; http_client_body; sid:1211009; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect possible shellcode using known x86 NOP sled patterns.", "output": "alert ip any any -> any any (msg:\"Possible Shellcode - NOP Sled\"; content:\"|90 90 90 90|\"; sid:1043010; rev:1;)"}
{"instruction": "Create a Snort rule to", "input": "detect masscan TCP SYN scan activity.", "output": "alert tcp any any -> any any (msg:\"Masscan TCP SYN Scan\"; flags:S; detection_filter:track by_src, count 100, seconds 10; sid:1235011; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect suspicious .exe file downloads over HTTP.", "output": "alert tcp $EXTERNAL_NET any -> $HOME_NET any (msg:\"Executable File Download\"; flow:to_client,established; content:\".exe\"; http_uri; sid:1023012; rev:1;)"}
{"instruction": "Create a rule to alert", "input": "on potential Slowloris attacks.", "output": "alert tcp any any -> any any (msg:\"Possible Slowloris Attack\"; flow:established,to_server; detection_filter:track by_src, count 50, seconds 10; sid:1121013; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect usage of suspicious user-agents like 'Nikto' or 'curl'.", "output": "alert tcp any any -> any 80 (msg:\"Suspicious User-Agent Detected\"; content:\"User-Agent|3A| curl\"; http_header; sid:1241014; rev:1;)"}
{"instruction": "Create a Snort rule to", "input": "detect unauthorized access to phpMyAdmin.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"phpMyAdmin Access Attempt\"; flow:to_server,established; content:\"/phpmyadmin\"; http_uri; sid:1053415; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect potential RDP brute-force attempts on port 3389.", "output": "alert tcp any any -> any 3389 (msg:\"RDP Brute Force Attempt\"; flow:to_server,established; detection_filter:track by_src, count 5, seconds 60; sid:1023116; rev:1;)"}
{"instruction": "Create a Snort rule to", "input": "alert on ICMP packets directed at broadcast addresses.", "output": "alert icmp any any -> 255.255.255.255 any (msg:\"ICMP to Broadcast Address\"; sid:1231017; rev:1;)"}
{"instruction": "Write a rule to detect", "input": "packets with both SYN and FIN flags set (potential scan).", "output": "alert tcp any any -> any any (msg:\"SYN-FIN Scan Detected\"; flags:SF; sid:1003528; rev:1;)"}
{"instruction": "Create a rule to detect", "input": "use of default 'admin' credentials in HTTP login requests.", "output": "alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS (msg:\"Default Admin Login Attempt\"; content:\"username=admin\"; http_client_body; sid:1012319; rev:1;)"}
{"instruction": "Write a Snort rule to", "input": "detect shellcode using 'setuid(0)' syscall on x86 systems.", "output": "alert ip $EXTERNAL_NET $SHELLCODE_PORTS -> $HOME_NET any (msg:\"SHELLCODE x86 setuid 0\"; content:\"|B0 17 CD 80|\"; sid:1441020; rev:1;)"}
